---
import '@/styles/globals.css';
import { marked } from 'marked';

import { basename, extname } from 'path';
import type { MarkdownInstance } from 'astro';
import TreeNode from '../components/TreeNode.astro';
import { Nav } from '../components/background';
import Ad from './Blog/Ad';
import { Contribute } from './Blog/BlogContainer';
import Main from './main.astro';

const posts = Object.values(
  import.meta.glob(
    ['../pages/docs/**/!(_)*.{md,mdx}', '!../pages/docs/**/_*/**'],
    { eager: true },
  ),
) as MarkdownInstance<{ title: string; subtitle: string }>[];

function createObject(
  obj: Record<string, any>,
  keys: string[],
  value: any = null,
): Record<string, any> {
  let current = obj;

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];

    if (i === keys.length - 1) {
      // Last key in the chain
      if (!current[key]) {
        current[key] = { ...value, children: {} };
      } else {
        current[key] = {
          ...current[key],
          ...value,
        };
      }
    } else {
      // Intermediate keys
      current[key] = current[key] || { children: {} };
      current = current[key].children;
    }
  }

  return obj;
}

const groups = {};
for (const post of posts) {
  const dot = post
    .url!.split('/')
    .slice(2)
    .map((it) => it.replaceAll(/-/g, ' ').replace(/^\d./, ''));
  createObject(groups, dot, await extractProps(post));
}

async function extractProps(
  post: MarkdownInstance<{ navName?: string; title: string; subtitle: string }>,
) {
  const name = basename(post.file)
    .replace(extname(post.file), '')
    .replace(/^\d\./g, '');
  return {
    name,
    navName: post.frontmatter.navName
      ? await marked.parseInline(post.frontmatter.navName, {
          async: true,
        })
      : name,
    title: post.frontmatter.title,
    subtitle: post.frontmatter.subtitle,
    href: post
      .url!.replaceAll(/\d\./g, '')
      .replaceAll(/\s/g, '-')
      .toLowerCase(),
    headings: post.getHeadings().map((it) => ({
      ...it,
      slug: `#${it.slug}`,
    })),
  };
}

const frontmatter = Astro.props.frontmatter || {};
const url = (Astro.props.url || '').toLowerCase();

const canonical = Astro.site && url ? new URL(url, Astro.site).pathname : '';
const dashes = '-'.repeat(1000);

const content = await marked.parseInline(frontmatter.title, { async: true });
---

<Main title={frontmatter.title} canonical={canonical}>
  <Nav client:load className="border-b" />
  <div
    class="mx-auto mt-16 grid max-w-[1470px] grid-cols-1 gap-4 gap-x-12 px-6 md:grid-cols-[240px_minmax(0,2fr)] md:gap-x-8 lg:grid-cols-[240px_minmax(0,1fr)_310px] lg:gap-x-4 xl:gap-x-12 2xl:px-0"
  >
    <aside
      class="scroll-pretty sticky top-16 hidden h-[calc(100vh-4rem)] overflow-y-auto border-r md:block lg:block"
    >
      <TreeNode tree={groups} />
      <div class="mt-6"></div>
    </aside>

    <article class="prose max-w-full pb-16">
      <p class="invisible h-0">{dashes}</p>
      <h1
        class="not-prose text-primary mb-0 text-4xl font-bold [&_p]:m-0"
        set:html={content}
      />
      <!-- <p class="text-secondary-foreground/70">{frontmatter.subtitle}</p> -->
      <slot />
    </article>

    <aside
      class="scroll-pretty sticky top-16 hidden h-[calc(100vh-4rem)] flex-col justify-between space-y-4 overflow-y-auto px-2 lg:flex"
    >
      <Contribute className="mt-6" path={url} />
      <Ad client:idle className="mb-4 mt-4" />
    </aside>
  </div>
</Main>
