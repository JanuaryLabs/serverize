---
import '@/styles/globals.css';

import type { MarkdownInstance, MarkdownLayoutProps } from 'astro';
import { Nav } from '../components/background';
import TreeNode from '../components/TreeNode.astro';
import Main from './main.astro';

const posts = Object.values(
  import.meta.glob('../pages/docs/**/*.{md,mdx}', { eager: true }),
) as MarkdownInstance<{ title: string; subtitle: string }>[];

function createObject(
  obj: Record<string, any>,
  keys: string[],
  value: any = null,
): Record<string, any> {
  let current = obj;

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];

    if (i === keys.length - 1) {
      // Last key in the chain
      if (!current[key]) {
        current[key] = { ...value, children: {} };
      } else {
        current[key] = {
          ...current[key],
          ...value,
        };
      }
    } else {
      // Intermediate keys
      current[key] = current[key] || { children: {} };
      current = current[key].children;
    }
  }

  return obj;
}

const groups = {};
for (const post of posts) {
  const dot = post
    .url!.split('/')
    .slice(2)
    .map((it) => it.replaceAll(/-/g, ' ').replace(/^\d./, ''));
  createObject(groups, dot, extractProps(post));
}

function extractProps(
  post: MarkdownInstance<{ title: string; subtitle: string }>,
) {
  return {
    title: post.frontmatter.title,
    subtitle: post.frontmatter.subtitle,
    href: post.url!.replaceAll(/\d\./g, ''),
    headings: post.getHeadings().map((it) => ({
      title: it.text,
      href: `#${it.slug}`,
      level: it.depth,
    })),
  };
}

type Props = MarkdownLayoutProps<{
  title: string;
  author: string;
  date: string;
  minutesRead: string;
  subtitle: string;
}>;
const { frontmatter, url, headings } = Astro.props;
const canonical = Astro.site && url ? new URL(url, Astro.site).pathname : '';
console.log({ frontmatter, url, headings, canonical });
---

<Main title={frontmatter.title} canonical={canonical}>
  <Nav client:load className="border-b" />
  <!-- <div
    class="mx-auto grid max-w-[1460px] grid-cols-1 gap-x-12 md:gap-x-8 px-6 md:grid-cols-7 lg:grid-cols-7 lg:gap-x-4 xl:grid-cols-5 xl:gap-x-12"
  >
    <TreeNode
      className="hidden border-r md:col-span-2 md:block xl:col-span-1"
      tree={groups}
    />
    <article
      class="prose col-span-full max-w-full pt-6 md:col-span-5 lg:col-span-5 xl:col-span-3"
    >
      <slot />
    </article>
    <TreeNode
      className="hidden lg:col-span-2 lg:block xl:col-span-1"
      tree={groups}
    />
  </div> -->
  <div
    class="mx-auto grid max-w-[1460px] grid-cols-1 gap-4 gap-x-12 px-6 md:grid-cols-[240px_minmax(0,2fr)] md:gap-x-8 lg:grid-cols-[240px_minmax(0,1fr)_240px] lg:gap-x-4 xl:gap-x-12"
  >
    <aside class="hidden border-r md:block lg:block">
      <TreeNode tree={groups} />
    </aside>

    <article class="prose max-w-full pt-6">
      <slot />
    </article>

    <aside class="hidden lg:block">
      <TreeNode tree={groups} />
    </aside>
  </div>
</Main>
