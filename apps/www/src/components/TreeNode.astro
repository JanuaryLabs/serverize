---
import { titlecase } from 'stringcase';
import Toc from '../layouts/Blog/Toc';
import TocSpy from '../layouts/Blog/TocSpy';
import type { DocsTree } from '../types/docs';
interface Props {
  tree: DocsTree;
  level?: number;
  className?: string;
}

const { tree, level = 0, className } = Astro.props;
const currentPath = Astro.url.pathname;
---

<ul class:list={[level === 0 ? 'pl-0' : 'border-l', className || '']}>
  {
    Object.entries(tree).map(([key, value]) => {
      const isActive = value.href && currentPath.startsWith(value.href);
      return (
        <li class:list={[level > 0 && 'mt-1 pl-4', level === 0 && 'pt-6']}>
          {value.href ? (
            <a
              href={value.href}
              style={{
                fontVariantCaps: level === 0 ? 'all-petite-caps' : 'normal',
              }}
              class:list={[
                'hover:text-primary heading-link',
                level === 0
                  ? 'text-lg font-semibold uppercase tracking-wide'
                  : 'text-secondary-foreground/80 text-[15px]',
              ]}
            >
              {value.name || key}
            </a>
          ) : (
            <span
              style={{
                fontVariantCaps: level === 0 ? 'all-petite-caps' : 'normal',
              }}
              class:list={[
                '',
                level === 0 && 'text-lg font-semibold uppercase tracking-wide',
              ]}
            >
              {key}
            </span>
          )}
          {level === 1 && value.headings && isActive && (
            <ul class="mt-1 pl-2">
              <Toc toc={value.headings} path={'Astro.props.url!'} />
              <TocSpy client:idle />
            </ul>
          )}
          {Object.keys(value.children).length > 0 && (
            <Astro.self tree={value.children} level={level + 1} />
          )}
        </li>
      );
    })
  }
</ul>
